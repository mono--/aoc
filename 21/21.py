
def flip(pattern):
	n=len(pattern);
	#print n;
	flipped=[];
	for i in range(n): #zeilen
		s="";
		for j in range(n):
			s=s+pattern[i][n-1-j];
		flipped.append(s);
	return flipped;

def rotl(pattern):
	n=len(pattern);
	rotd=[];
	for i in range(n): #zeilen
		s="";
		for j in range(n):
			s=s+pattern[j][n-1-i];
		rotd.append(s);
	return rotd;

def varia(pattern):
	v=[];
	v.append(pattern);
	pattern=rotl(pattern);
	v.append(pattern);
	pattern=rotl(pattern);
	v.append(pattern);
	pattern=rotl(pattern);
	v.append(pattern);
	pattern=flip(pattern);
	v.append(pattern);
	pattern=rotl(pattern);
	v.append(pattern);
	pattern=rotl(pattern);
	v.append(pattern);
	pattern=rotl(pattern);
	v.append(pattern);
	return v;

start=""".#.
..#
###"""

#lines=start.split('\n');
lines=start.split('\n');

inp2="""../.. => .../.##/##.
#./.. => .##/.##/#..
##/.. => ..#/.../###
.#/#. => #.#/..#/##.
##/#. => .#./.#./..#
##/## => #.#/#../###""";

inp3=""".../.../... => ..../#.../.##./..#.
#../.../... => ####/#.##/##.#/..#.
.#./.../... => ..##/..##/..##/..##
##./.../... => ..../..#./##../##.#
#.#/.../... => ##.#/..../####/...#
###/.../... => .#.#/.###/.#../.#.#
.#./#../... => .###/#.#./...#/##..
##./#../... => #.##/#.../####/###.
..#/#../... => ####/...#/...#/#.##
#.#/#../... => .#../##../..##/..#.
.##/#../... => .#../..##/..../.##.
###/#../... => #.../..#./.#.#/#..#
.../.#./... => #.#./.#.#/.###/...#
#../.#./... => ###./.#../...#/.#..
.#./.#./... => ##.#/.#../#..#/##..
##./.#./... => #..#/...#/.#.#/###.
#.#/.#./... => .##./#.../#..#/.###
###/.#./... => .#.#/##.#/..../##.#
.#./##./... => ##.#/#.##/.#.#/#.##
##./##./... => #.##/..#./..#./.##.
..#/##./... => ..../#.../..#./..##
#.#/##./... => .##./####/####/####
.##/##./... => #.##/####/#.##/#..#
###/##./... => .#../.###/##../...#
.../#.#/... => ...#/...#/#.##/####
#../#.#/... => ..#./..#./###./.##.
.#./#.#/... => .##./##../.###/.#.#
##./#.#/... => #.#./.#../.##./...#
#.#/#.#/... => ##.#/..##/#.../##.#
###/#.#/... => ..##/##../.#.#/..##
.../###/... => .#../#.../.##./....
#../###/... => ..##/..##/...#/.##.
.#./###/... => #..#/..#./#.#./..##
##./###/... => #.##/.#../##.#/##.#
#.#/###/... => ####/###./.##./...#
###/###/... => #..#/#.##/..../.##.
..#/.../#.. => #.#./.#../##../..#.
#.#/.../#.. => ##.#/####/##../.#.#
.##/.../#.. => ####/##../#..#/..#.
###/.../#.. => ##../..#./####/##.#
.##/#../#.. => ##../#.#./###./..##
###/#../#.. => ..../.#../#..#/...#
..#/.#./#.. => ..#./...#/.###/.#.#
#.#/.#./#.. => ###./..../#.#./###.
.##/.#./#.. => ####/#.##/.#.#/.#..
###/.#./#.. => ###./#.##/##../####
.##/##./#.. => ##.#/..##/..#./.#..
###/##./#.. => ##.#/.##./.###/.##.
#../..#/#.. => #.../###./##.#/#..#
.#./..#/#.. => ..##/.###/...#/..#.
##./..#/#.. => ##../#.#./...#/.#..
#.#/..#/#.. => ..#./###./##../.###
.##/..#/#.. => #.../.##./..../#.#.
###/..#/#.. => .#.#/#.##/#.##/..#.
#../#.#/#.. => ..##/..##/#.../####
.#./#.#/#.. => #.../...#/..../..##
##./#.#/#.. => ###./..##/.#../.##.
..#/#.#/#.. => ...#/..##/..#./.#..
#.#/#.#/#.. => #.#./.#../..../##..
.##/#.#/#.. => ..#./.###/##.#/....
###/#.#/#.. => #.##/..##/...#/##..
#../.##/#.. => #.#./##../###./.#.#
.#./.##/#.. => .###/#..#/.##./....
##./.##/#.. => .#.#/.#../.###/.##.
#.#/.##/#.. => .#../..##/###./#.##
.##/.##/#.. => ##../.##./..#./.#..
###/.##/#.. => .#.#/..#./#..#/.###
#../###/#.. => #.##/#..#/.#.#/#.#.
.#./###/#.. => #.../#..#/#.../.#.#
##./###/#.. => ##../####/##../.###
..#/###/#.. => #.../..../####/##.#
#.#/###/#.. => ...#/..../...#/..##
.##/###/#.. => .#../####/#.##/.#..
###/###/#.. => ###./.#.#/#.../##..
.#./#.#/.#. => ...#/##../####/...#
##./#.#/.#. => ####/#..#/###./#.##
#.#/#.#/.#. => .###/#..#/..#./...#
###/#.#/.#. => ###./.###/##.#/###.
.#./###/.#. => #..#/#.../..#./####
##./###/.#. => #.../..../#..#/..##
#.#/###/.#. => #..#/.#.#/#.../##..
###/###/.#. => .#.#/..../.#.#/#.##
#.#/..#/##. => .#../..##/...#/###.
###/..#/##. => .###/..#./##.#/##.#
.##/#.#/##. => ####/#.##/.##./##..
###/#.#/##. => #..#/#..#/####/#.##
#.#/.##/##. => .###/#.#./#..#/.#.#
###/.##/##. => #.#./#.#./#.##/..##
.##/###/##. => ####/###./##.#/##.#
###/###/##. => ##../..##/#.#./#...
#.#/.../#.# => .#../###./.###/##.#
###/.../#.# => ..../.#.#/#..#/##..
###/#../#.# => ..#./#.../.##./...#
#.#/.#./#.# => ...#/#.../##.#/.##.
###/.#./#.# => ..../..../#.#./##.#
###/##./#.# => .#../...#/...#/###.
#.#/#.#/#.# => ...#/#.../##../.###
###/#.#/#.# => #.../...#/.#../#.##
#.#/###/#.# => ..../.##./..../##..
###/###/#.# => .##./.#.#/#.##/.##.
###/#.#/### => #.#./####/.##./.##.
###/###/### => .#.#/..##/#.##/.##.""";

rules2=[];
for rule in inp2.split('\n'):
	rules2.append(rule.split(' => '));

rules3=[];
for rule in inp3.split('\n'):
	rules3.append(rule.split(' => '));

rules_two=[];
for rule in rules2:
	rules_two.append([varia(rule[0].split('/')),rule[1].split('/')]);

rules_three=[];
for rule in rules3:
	rules_three.append([varia(rule[0].split('/')),rule[1].split('/')]);


def ext2(n):
	nlines=[];
	for i in range(int(n/2)*3):
		nlines.append(['.']*(int(n/2)*3));
	return nlines

def ext3(n):
	nlines=[];
	for i in range(int(n/3)*4):
		nlines.append(['#']*(int(n/3)*4));
	return nlines


for iteration in range(18):
	n=len(lines);
	if n % 2== 0:
		nlines=ext2(n);	
		sq=[];
		for i in range(int(n/2)):
			
			for j in range(int(n/2)):
				sq=[];
				sq.append(lines[i*2][j*2:j*2+2]);
				sq.append(lines[i*2+1][j*2:j*2+2]);
				for r in rules_two:
					if sq in r[0]:
						#print sq;
						#print "match!", r[1];
						nsq=r[1];
						#print nsq;
						for k in range(3):
							for l in range(3):
								#print k,l;
								#print nlines[i*3+k][j*3+l]
								nlines[i*3+k][j*3+l]=nsq[k][l];

	elif n % 3 == 0:
		nlines=ext3(n);
		#print len(nlines);
		
		for i in range(int(n/3)):

			for j in range(int(n/3)):
				sq=[];
				sq.append(lines[i*3][j*3:j*3+3]);
				sq.append(lines[i*3+1][j*3:j*3+3]);
				sq.append(lines[i*3+2][j*3:j*3+3]);
				for r in rules_three:
					if sq in r[0]:
						#print "match!", r[1];
						nsq=r[1];
						for k in range(4):
							for l in range(4):
								#print k,l;
								#print nlines[i*4+k][j*4+l]
								nlines[i*4+k][j*4+l]=nsq[k][l];
	lines=[];
	for i in range(len(nlines)):
		s="";
		for t in nlines[i]:
			s=s+t;
		lines.append(s);
ct=0;
for i in range(len(lines)):
	ct += lines[i].count('#');
	print ct;
print ct;